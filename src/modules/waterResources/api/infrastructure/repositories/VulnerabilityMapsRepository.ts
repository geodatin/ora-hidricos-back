import { getManager } from 'typeorm'

import { toSnakeCase } from '@shared/utils/toSnakeCase'

import {
  IVulnerabilityMap,
  IVulnerabilityMapsRepository,
} from '../../repositories/IVulnerabilityMapsRepository'

export class VulnerabilityMapsRepository
  implements IVulnerabilityMapsRepository
{
  async getShape(mapType: string): Promise<IVulnerabilityMap[]> {
    const query = getManager()
      .createQueryBuilder()
      .from(`hydric.${toSnakeCase(mapType)}`, 'vulnerability')
      .select('vulnerability.classes', 'class')
      .addSelect('vulnerability.value_min', 'min')
      .addSelect('vulnerability.value_max', 'max')
      .addSelect('vulnerability.rangos', 'range')
      .addSelect('ST_AsGeoJSON(vulnerability.geom)::json', 'geometry')

    return await query.getRawMany()
  }
}
